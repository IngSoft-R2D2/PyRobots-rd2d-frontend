{"ast":null,"code":"var _jsxFileName = \"/home/benjamin/facultad/inge/PyRobots-rd2d-frontend/pyrobots-app/src/components/Board.js\";\nimport React from 'react';\nimport './Board.css';\nimport Cell from './Cell.js';\nimport GridSquare from './Cell.js'; // Represents a 10 x 18 grid of grid squares\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GridBoard(props) {\n  // generates an array of 18 rows, each containing 10 GridSquares.\n  const grid = [];\n\n  for (let row = 0; row < 10; row++) {\n    grid.push([]);\n\n    for (let col = 0; col < 10; col++) {\n      grid[row].push( /*#__PURE__*/_jsxDEV(GridSquare, {\n        color: \"1\"\n      }, `${col}${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 28\n      }, this));\n    }\n  } // The components generated in makeGrid are rendered in div.grid-board\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-board\",\n    children: grid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n} // const Board = () => {  \n//   return ( \n//       <table>\n//         <tbody>\n//         {Array.from({length:10}, _ =>\n//           <tr>{Array.from({length:10}, _ => <Cell />)}</tr>\n//         )}\n//         </tbody>\n//       </table>\n//     );\n//   }\n//export default Board;\n\n_c = GridBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridBoard\");","map":{"version":3,"names":["React","Cell","GridSquare","GridBoard","props","grid","row","push","col"],"sources":["/home/benjamin/facultad/inge/PyRobots-rd2d-frontend/pyrobots-app/src/components/Board.js"],"sourcesContent":["import React from 'react';\nimport './Board.css';\nimport Cell from './Cell.js'\nimport GridSquare from './Cell.js'\n\n// Represents a 10 x 18 grid of grid squares\n\nexport default function GridBoard(props) {\n\n  // generates an array of 18 rows, each containing 10 GridSquares.\n\n    const grid = []\n    for (let row = 0; row < 10; row ++) {\n        grid.push([])\n        for (let col = 0; col < 10; col ++) {\n            grid[row].push(<GridSquare key={`${col}${row}`} color=\"1\" />)\n        }\n    }\n\n  // The components generated in makeGrid are rendered in div.grid-board\n\n    return (\n        <div className='grid-board'>\n            {grid}\n        </div>\n    )\n}\n  // const Board = () => {  \n  //   return ( \n  //       <table>\n  //         <tbody>\n  //         {Array.from({length:10}, _ =>\n  //           <tr>{Array.from({length:10}, _ => <Cell />)}</tr>\n  //         )}\n  //         </tbody>\n  //       </table>\n  //     );\n  //   }\n\n  \n\n\n//export default Board;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,WAAvB,C,CAEA;;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EAEvC;EAEE,MAAMC,IAAI,GAAG,EAAb;;EACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAoC;IAChCD,IAAI,CAACE,IAAL,CAAU,EAAV;;IACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAoC;MAChCH,IAAI,CAACC,GAAD,CAAJ,CAAUC,IAAV,eAAe,QAAC,UAAD;QAAiC,KAAK,EAAC;MAAvC,GAAkB,GAAEC,GAAI,GAAEF,GAAI,EAA9B;QAAA;QAAA;QAAA;MAAA,QAAf;IACH;EACJ,CAVoC,CAYvC;;;EAEE,oBACI;IAAK,SAAS,EAAC,YAAf;IAAA,UACKD;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,C,CACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKF;;KAnCwBF,S"},"metadata":{},"sourceType":"module"}