{"ast":null,"code":"var _jsxFileName = \"/home/rocio/PyRobots-rd2d-frontend/pyrobots-app/src/components/InputFile.js\";\nimport React from \"react\";\nimport { Input, Label, InputGroup, ErrorText, ValidationIcon } from \"../elements/Forms\";\nimport { faCheckCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputFileComponent = _ref => {\n  let {\n    state,\n    changeState,\n    type,\n    label,\n    name,\n    errorText,\n    regularExpression,\n    Inputfunction,\n    obligatory\n  } = _ref;\n  const onChange = e => {\n    changeState({\n      ...state,\n      field: e.target.value\n    });\n  };\n  function convertBase64(file) {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n  }\n  ;\n  const validation = () => {\n    if (regularExpression) {\n      if (regularExpression.test(state.field)) {\n        changeState({\n          ...state,\n          valid: \"true\"\n        });\n      } else {\n        changeState({\n          ...state,\n          valid: \"false\"\n        });\n      }\n    }\n    if (Inputfunction) {\n      Inputfunction();\n    }\n  };\n  const handleFileRead = async event => {\n    const file = event.target.files[0];\n    var base64 = await convertBase64(file);\n    changeState({\n      ...state,\n      myFile: base64\n    });\n    console.log(base64);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: name,\n      valid: state.valid,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: type,\n        id: name,\n        value: state.field,\n        onChange: onChange,\n        onSubmit: handleFileRead,\n        onKeyUp: validation,\n        onBlur: validation,\n        valid: state.valid,\n        obligatory: obligatory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ValidationIcon, {\n        icon: state.valid === \"true\" ? faCheckCircle : faTimesCircle,\n        valid: state.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorText, {\n      valid: state.valid,\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = InputFileComponent;\nexport default InputFileComponent;\nvar _c;\n$RefreshReg$(_c, \"InputFileComponent\");","map":{"version":3,"names":["React","Input","Label","InputGroup","ErrorText","ValidationIcon","faCheckCircle","faTimesCircle","InputFileComponent","state","changeState","type","label","name","errorText","regularExpression","Inputfunction","obligatory","onChange","e","field","target","value","convertBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error","validation","test","valid","handleFileRead","event","files","base64","myFile","console","log"],"sources":["/home/rocio/PyRobots-rd2d-frontend/pyrobots-app/src/components/InputFile.js"],"sourcesContent":["import React from \"react\";\nimport {\n  Input,\n  Label,\n  InputGroup,\n  ErrorText,\n  ValidationIcon\n} from \"../elements/Forms\";\nimport {\n  faCheckCircle,\n  faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst InputFileComponent = ({\n  state,\n  changeState,\n  type,\n  label,\n  name,\n  errorText,\n  regularExpression,\n  Inputfunction,\n  obligatory\n}) => {\n\n\tconst onChange = (e) => {\n\t\tchangeState({ ...state, field: e.target.value});\n\t};\n\t\n  function convertBase64(file){\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst fileReader = new FileReader();\n\t\t\tfileReader.readAsDataURL(file)\n\t\t\tfileReader.onload = () => {\n\t\t\t\tresolve(fileReader.result);\n\t\t\t}\n\t\t\tfileReader.onerror = (error) => {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t})\n\t};\n\n\tconst validation = () => {\n    if (regularExpression) {\n      if (regularExpression.test(state.field)) {\n        changeState({ ...state, valid: \"true\" });\n      } else {\n        changeState({ ...state, valid: \"false\" });\n      }\n    }\n\n    if (Inputfunction) {\n      Inputfunction();\n    }\n  };\n\n  const handleFileRead = async(event) => {\n\t\t\n\t\tconst file = event.target.files[0]\n\t\tvar base64 = await convertBase64(file)\n\t\tchangeState({ ...state, myFile: base64});\n\t\tconsole.log(base64)\n  };\n\n  return (\n    <div>\n      <Label htmlFor={name} valid={state.valid}>\n        {label}\n      </Label>\n      <InputGroup>\n        <Input\n          type={type}\n          id={name}\n          value={state.field}\n          onChange={onChange}\n\t\t\t\t\tonSubmit={handleFileRead}\n          onKeyUp={validation}\n          onBlur={validation}\n          valid={state.valid}\n          obligatory={obligatory}\n        />\n        <ValidationIcon\n          icon={state.valid === \"true\" ? faCheckCircle : faTimesCircle}\n          valid={state.valid}\n        />\n      </InputGroup>\n      <ErrorText valid={state.valid}>{errorText}</ErrorText>\n    </div>\n  );\n};\n\nexport default InputFileComponent;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,EACLC,KAAK,EACLC,UAAU,EACVC,SAAS,EACTC,cAAc,QACT,mBAAmB;AAC1B,SACEC,aAAa,EACbC,aAAa,QACR,mCAAmC;AAAC;AAE3C,MAAMC,kBAAkB,GAAG,QAUrB;EAAA,IAVsB;IAC1BC,KAAK;IACLC,WAAW;IACXC,IAAI;IACJC,KAAK;IACLC,IAAI;IACJC,SAAS;IACTC,iBAAiB;IACjBC,aAAa;IACbC;EACF,CAAC;EAEA,MAAMC,QAAQ,GAAIC,CAAC,IAAK;IACvBT,WAAW,CAAC;MAAE,GAAGD,KAAK;MAAEW,KAAK,EAAED,CAAC,CAACE,MAAM,CAACC;IAAK,CAAC,CAAC;EAChD,CAAC;EAEA,SAASC,aAAa,CAACC,IAAI,EAAC;IAC5B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACvC,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;MACnCD,UAAU,CAACE,aAAa,CAACN,IAAI,CAAC;MAC9BI,UAAU,CAACG,MAAM,GAAG,MAAM;QACzBL,OAAO,CAACE,UAAU,CAACI,MAAM,CAAC;MAC3B,CAAC;MACDJ,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;QAC/BP,MAAM,CAACO,KAAK,CAAC;MACd,CAAC;IACF,CAAC,CAAC;EACH;EAAC;EAED,MAAMC,UAAU,GAAG,MAAM;IACtB,IAAIpB,iBAAiB,EAAE;MACrB,IAAIA,iBAAiB,CAACqB,IAAI,CAAC3B,KAAK,CAACW,KAAK,CAAC,EAAE;QACvCV,WAAW,CAAC;UAAE,GAAGD,KAAK;UAAE4B,KAAK,EAAE;QAAO,CAAC,CAAC;MAC1C,CAAC,MAAM;QACL3B,WAAW,CAAC;UAAE,GAAGD,KAAK;UAAE4B,KAAK,EAAE;QAAQ,CAAC,CAAC;MAC3C;IACF;IAEA,IAAIrB,aAAa,EAAE;MACjBA,aAAa,EAAE;IACjB;EACF,CAAC;EAED,MAAMsB,cAAc,GAAG,MAAMC,KAAK,IAAK;IAEvC,MAAMf,IAAI,GAAGe,KAAK,CAAClB,MAAM,CAACmB,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIC,MAAM,GAAG,MAAMlB,aAAa,CAACC,IAAI,CAAC;IACtCd,WAAW,CAAC;MAAE,GAAGD,KAAK;MAAEiC,MAAM,EAAED;IAAM,CAAC,CAAC;IACxCE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EACnB,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,KAAK;MAAC,OAAO,EAAE5B,IAAK;MAAC,KAAK,EAAEJ,KAAK,CAAC4B,KAAM;MAAA,UACtCzB;IAAK;MAAA;MAAA;MAAA;IAAA,QACA,eACR,QAAC,UAAU;MAAA,wBACT,QAAC,KAAK;QACJ,IAAI,EAAED,IAAK;QACX,EAAE,EAAEE,IAAK;QACT,KAAK,EAAEJ,KAAK,CAACW,KAAM;QACnB,QAAQ,EAAEF,QAAS;QACxB,QAAQ,EAAEoB,cAAe;QACpB,OAAO,EAAEH,UAAW;QACpB,MAAM,EAAEA,UAAW;QACnB,KAAK,EAAE1B,KAAK,CAAC4B,KAAM;QACnB,UAAU,EAAEpB;MAAW;QAAA;QAAA;QAAA;MAAA,QACvB,eACF,QAAC,cAAc;QACb,IAAI,EAAER,KAAK,CAAC4B,KAAK,KAAK,MAAM,GAAG/B,aAAa,GAAGC,aAAc;QAC7D,KAAK,EAAEE,KAAK,CAAC4B;MAAM;QAAA;QAAA;QAAA;MAAA,QACnB;IAAA;MAAA;MAAA;MAAA;IAAA,QACS,eACb,QAAC,SAAS;MAAC,KAAK,EAAE5B,KAAK,CAAC4B,KAAM;MAAA,UAAEvB;IAAS;MAAA;MAAA;MAAA;IAAA,QAAa;EAAA;IAAA;IAAA;IAAA;EAAA,QAClD;AAEV,CAAC;AAAC,KA5EIN,kBAAkB;AA8ExB,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}